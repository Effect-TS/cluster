diff --git a/dist/assemble-release-plan.cjs.dev.js b/dist/assemble-release-plan.cjs.dev.js
index e1376ca756d69816f8c79637ee7b45161f092167..d430938d9f167a5136bdbe7a446ae4cd8d83fa7d 100644
--- a/dist/assemble-release-plan.cjs.dev.js
+++ b/dist/assemble-release-plan.cjs.dev.js
@@ -138,16 +138,6 @@ function determineDependents({
         } of dependencyVersionRanges) {
           if (nextRelease.type === "none") {
             continue;
-          } else if (shouldBumpMajor({
-            dependent,
-            depType,
-            versionRange,
-            releases,
-            nextRelease,
-            preInfo,
-            onlyUpdatePeerDependentsWhenOutOfRange: config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange
-          })) {
-            type = "major";
           } else if ((!releases.has(dependent) || releases.get(dependent).type === "none") && (config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.updateInternalDependents === "always" || !semverSatisfies__default['default'](incrementVersion(nextRelease, preInfo), versionRange))) {
             switch (depType) {
               case "dependencies":
diff --git a/dist/assemble-release-plan.cjs.prod.js b/dist/assemble-release-plan.cjs.prod.js
index 3a83720644a94cdf6e62fa188a72c51c0384d00e..dc45739511ebb0e547f5c7e204f0da679cd4ee88 100644
--- a/dist/assemble-release-plan.cjs.prod.js
+++ b/dist/assemble-release-plan.cjs.prod.js
@@ -70,15 +70,7 @@ function determineDependents({releases: releases, packagesByName: packagesByName
       if (!dependentPackage) throw new Error("Dependency map is incorrect");
       if (config.ignore.includes(dependent)) type = "none"; else {
         const dependencyVersionRanges = getDependencyVersionRanges(dependentPackage.packageJson, nextRelease);
-        for (const {depType: depType, versionRange: versionRange} of dependencyVersionRanges) if ("none" !== nextRelease.type) if (shouldBumpMajor({
-          dependent: dependent,
-          depType: depType,
-          versionRange: versionRange,
-          releases: releases,
-          nextRelease: nextRelease,
-          preInfo: preInfo,
-          onlyUpdatePeerDependentsWhenOutOfRange: config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange
-        })) type = "major"; else if (!(releases.has(dependent) && "none" !== releases.get(dependent).type || "always" !== config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.updateInternalDependents && semverSatisfies__default.default(incrementVersion(nextRelease, preInfo), versionRange))) switch (depType) {
+        for (const {depType: depType, versionRange: versionRange} of dependencyVersionRanges) if ("none" !== nextRelease.type) if (!(releases.has(dependent) && "none" !== releases.get(dependent).type || "always" !== config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.updateInternalDependents && semverSatisfies__default.default(incrementVersion(nextRelease, preInfo), versionRange))) switch (depType) {
          case "dependencies":
          case "optionalDependencies":
          case "peerDependencies":
diff --git a/src/determine-dependents.ts b/src/determine-dependents.ts
index 08c08127ccfb5974d81b3ace592fced5b68aeaf7..13c52dfc709fab33f5a8df4237e82e19bbb9893c 100644
--- a/src/determine-dependents.ts
+++ b/src/determine-dependents.ts
@@ -67,20 +67,6 @@ export default function determineDependents({
           for (const { depType, versionRange } of dependencyVersionRanges) {
             if (nextRelease.type === "none") {
               continue;
-            } else if (
-              shouldBumpMajor({
-                dependent,
-                depType,
-                versionRange,
-                releases,
-                nextRelease,
-                preInfo,
-                onlyUpdatePeerDependentsWhenOutOfRange:
-                  config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH
-                    .onlyUpdatePeerDependentsWhenOutOfRange,
-              })
-            ) {
-              type = "major";
             } else if (
               (!releases.has(dependent) ||
                 releases.get(dependent)!.type === "none") &&
